/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/user/testlogin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login User
         * @description Login with SIWS
         */
        post: operations["login_user_api_user_testlogin_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/nonce": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate Nonce
         * @description Get nonce for SIWS
         */
        get: operations["generate_nonce_api_user_nonce_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate
         * @description Authenticate with SIWS
         */
        post: operations["authenticate_api_user_auth_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh Endpoint */
        post: operations["refresh_endpoint_api_user_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout */
        post: operations["logout_api_user_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Info
         * @description Get user info
         */
        get: operations["get_user_info_api_user_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Transactions
         * @description Get user transactions
         */
        get: operations["get_user_transactions_api_user_transactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/spl_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Spl Tokens
         * @description Get user spl_tokens
         */
        get: operations["get_user_spl_tokens_api_user_spl_tokens_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/claim_ref_balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim Ref Balance
         * @description Claim ref balance
         */
        post: operations["claim_ref_balance_api_user_claim_ref_balance_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Profile
         * @description Get user profile by id
         */
        get: operations["get_profile_api_user_profile_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/update_profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Profile
         * @description Update user's profile
         */
        post: operations["update_profile_api_user_update_profile_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/user_activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Activity
         * @description Get user activity
         */
        get: operations["get_user_activity_api_user_user_activity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/referrals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Referrals
         * @description Get user referrals
         */
        get: operations["get_user_referrals_api_user_referrals_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/ref_reward_history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Referral History
         * @description Get user referral history
         */
        get: operations["get_user_referral_history_api_user_ref_reward_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Spl Token Handler
         * @description Add new spl_token
         */
        post: operations["add_spl_token_handler_api_token_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Spl Token Handler
         * @description Get spl_token by id
         */
        get: operations["get_spl_token_handler_api_token_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Spl Token Stats Handler
         * @description Get spl_token stats
         */
        get: operations["get_spl_token_stats_handler_api_token_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/holders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Holders Handler
         * @description Get spl_token holders
         */
        get: operations["get_holders_handler_api_token_holders_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/holders/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Holders Status Handler
         * @description Get holders status for SPL token
         */
        get: operations["get_holders_status_handler_api_token_holders_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/on_the_rocket": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Spl Token On The Rocket Handler
         * @description Get spl_token on the rocket
         */
        get: operations["get_spl_token_on_the_rocket_handler_api_token_on_the_rocket_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Spl Tokens Handler
         * @description Get spl_tokens
         */
        get: operations["get_spl_tokens_handler_api_token_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/with_streams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Spl Tokens With Streams Handler
         * @description Get spl_tokens with streams
         */
        get: operations["get_spl_tokens_with_streams_handler_api_token_with_streams_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/swap_exact_a_to_b": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Swap Exact A To B Handler
         * @description Swap Exact A to B (Sell token A for SOL)
         */
        post: operations["swap_exact_a_to_b_handler_api_token_swap_exact_a_to_b_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/swap_a_to_exact_b": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Swap A To Exact B Handler
         * @description Swap A to Exact B (Sell token A for exact SOL)
         */
        post: operations["swap_a_to_exact_b_handler_api_token_swap_a_to_exact_b_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/swap_b_to_exact_a": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Swap B To Exact A Handler
         * @description Swap B to Exact A (Buy token A with SOL, exact token out)
         */
        post: operations["swap_b_to_exact_a_handler_api_token_swap_b_to_exact_a_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/swap_exact_b_to_a": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Swap Exact B To A Handler
         * @description Swap Exact B to A (Buy token A with fixed SOL)
         */
        post: operations["swap_exact_b_to_a_handler_api_token_swap_exact_b_to_a_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/audit/{token_address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Proxy To Goplus
         * @description Audit SPL token by address
         */
        get: operations["proxy_to_goplus_api_token_audit__token_address__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/insiders/{token_address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Insiders
         * @description Get insiders for SPL token by address
         */
        get: operations["get_insiders_api_token_insiders__token_address__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/snipers/{token_address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Snipers
         * @description Get snipers for SPL token by address
         */
        get: operations["get_snipers_api_token_snipers__token_address__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/favourite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Favourite Tokens
         * @description Get user's favourite SPL tokens
         */
        get: operations["get_favourite_tokens_api_token_favourite_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/favourite/{token_address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Favourite Token
         * @description Add SPL token to favourites
         */
        post: operations["add_favourite_token_api_token_favourite__token_address__post"];
        /**
         * Remove Favourite Token
         * @description Remove SPL token from favourites
         */
        delete: operations["remove_favourite_token_api_token_favourite__token_address__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/limit-orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Limit Order */
        post: operations["create_limit_order_api_limit_orders_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/limit-orders/{order_pubkey}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel Limit Order */
        post: operations["cancel_limit_order_api_limit_orders__order_pubkey__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/limit-orders/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Orders */
        get: operations["get_orders_api_limit_orders_active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/wallets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Wallets
         * @description Get user wallets
         */
        get: operations["get_user_wallets_api_wallets_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/wallets/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create New Wallet
         * @description Create wallet
         */
        post: operations["create_new_wallet_api_wallets_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/wallets/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archive User Wallet
         * @description Archieve wallet
         */
        post: operations["archive_user_wallet_api_wallets_archive_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/wallets/unarchive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unarchive User Wallet
         * @description Unarchieve wallet
         */
        post: operations["unarchive_user_wallet_api_wallets_unarchive_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/wallets/set_active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Active User Wallet
         * @description Set wallet active
         */
        post: operations["set_active_user_wallet_api_wallets_set_active_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/wallets/rename": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rename User Wallet
         * @description Rename wallet
         */
        post: operations["rename_user_wallet_api_wallets_rename_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/wallets/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw User Wallet
         * @description Withdraw wallet
         */
        post: operations["withdraw_user_wallet_api_wallets_withdraw_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/wallets/deposit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deposit User Wallet Batch */
        post: operations["deposit_user_wallet_batch_api_wallets_deposit_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/wallets/tx_history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Wallet Tx History
         * @description Get wallet tx history
         */
        get: operations["get_wallet_tx_history_api_wallets_tx_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/wallets/add_deposit_transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Deposit Transaction
         * @description Add deposit transaction
         */
        post: operations["add_deposit_transaction_api_wallets_add_deposit_transaction_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Subscribe
         * @description subscribe authenticated_user -> followee_id
         */
        post: operations["subscribe_api_subscriptions_subscribe_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions/unsubscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unsubscribe
         * @description delete user's subscription
         */
        delete: operations["unsubscribe_api_subscriptions_unsubscribe_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions/subscribers_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscribers List
         * @description Subscribers list by id
         */
        get: operations["subscribers_list_api_subscriptions_subscribers_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions/followees_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Followees List
         * @description Followees list by id
         */
        get: operations["followees_list_api_subscriptions_followees_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create
         * @description Create a post
         */
        post: operations["create_api_posts_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete
         * @description Delete a post
         */
        delete: operations["delete_api_posts_delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/edit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Edit Post
         * @description Edit a post
         */
        patch: operations["edit_post_api_posts_edit_patch"];
        trace?: never;
    };
    "/api/posts/reply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reply
         * @description Reply to post by parent_id
         */
        post: operations["reply_api_posts_reply_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/replies_tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Replies Tree
         * @description Replies tree
         */
        get: operations["replies_tree_api_posts_replies_tree_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/get_posts_by_user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Posts By User
         * @description Get posts by user
         */
        get: operations["posts_by_user_api_posts_get_posts_by_user_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/get_post_by_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Post By Id
         * @description Get post by id
         */
        get: operations["post_by_id_api_posts_get_post_by_id_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/posts_by_user_subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Posts By User Subscriptions
         * @description Get posts by user subscriptions
         */
        get: operations["posts_by_user_subscriptions_api_posts_posts_by_user_subscriptions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/global": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Global Posts
         * @description Get global feed
         */
        get: operations["global_posts_api_posts_global_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Like */
        post: operations["like_api_posts_like_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/unlike": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Unlike */
        delete: operations["unlike_api_posts_unlike_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/update_views": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Views */
        post: operations["update_views_api_posts_update_views_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/post_views": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Post Views
         * @description Get post views
         */
        get: operations["post_views_api_posts_post_views_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/repost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Repost
         * @description Repost post
         */
        post: operations["repost_api_posts_repost_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portfolio/trade_history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trade History
         * @description Get Trade History
         */
        get: operations["get_trade_history_api_portfolio_trade_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portfolio/pnl_statistics_by_period": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Pnl Statistics By Period
         * @description Get PNL Statistics, average PNL, total PNL, total spent, total revenue, total invested, total sold by days provided
         */
        get: operations["get_pnl_statistics_by_period_api_portfolio_pnl_statistics_by_period_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portfolio/pnl_statistics_all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Pnl Statistics All
         * @description Get PNL Statistics, average PNL, total PNL, total spent, total revenue, total invested, total sold all
         */
        get: operations["get_pnl_statistics_all_api_portfolio_pnl_statistics_all_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portfolio/txs_debug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Wallets Debug */
        get: operations["get_wallets_debug_api_portfolio_txs_debug_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portfolio/most_profitable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Most Profitable
         * @description Get Most Profitable tokens
         */
        get: operations["get_most_profitable_api_portfolio_most_profitable_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portfolio/active_positions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Active Positions
         * @description Get Active Positions
         */
        get: operations["get_active_positions_api_portfolio_active_positions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create
         * @description Create a post
         */
        post: operations["create_api_threads_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/get_post_by_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Post By Id
         * @description Get post by id
         */
        get: operations["post_by_id_api_threads_get_post_by_id_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/post_likes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Post Likes */
        get: operations["post_likes_api_threads_post_likes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Like */
        post: operations["like_api_threads_like_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/unlike": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Unlike */
        delete: operations["unlike_api_threads_unlike_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/token_thread": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Token Thread */
        get: operations["token_thread_api_threads_token_thread_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/reply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reply
         * @description Reply to post by parent_id
         */
        post: operations["reply_api_threads_reply_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/replies_tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Replies Tree
         * @description Replies tree
         */
        get: operations["replies_tree_api_threads_replies_tree_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/repost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Repost */
        post: operations["repost_api_threads_repost_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Spl Token Tx
         * @description Get spl token transactions
         */
        get: operations["get_spl_token_tx_api_tx_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tx/price-chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Price Chart
         * @description Get price chart for a token
         */
        get: operations["get_price_chart_api_tx_price_chart_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tx/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recent Tx Handler
         * @description Get recent transactions
         */
        get: operations["get_recent_tx_handler_api_tx_recent_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tx/last-by-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Last Tx By Token Handler
         * @description Get last transactions by token address or id
         */
        get: operations["get_last_tx_by_token_handler_api_tx_last_by_token_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Room Handler
         * @description Create room
         */
        post: operations["create_room_handler_api_room_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Room Handler
         * @description Delete room
         */
        post: operations["delete_room_handler_api_room_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room/info/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Room Info Handler
         * @description Get room information
         */
        get: operations["get_room_info_handler_api_room_info__slug__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Rooms List Handler
         * @description Get room
         */
        get: operations["get_rooms_list_handler_api_room_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room/ws_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ws Url Handler
         * @description Get ws url
         */
        get: operations["get_ws_url_handler_api_room_ws_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tasks Handler
         * @description Get tasks
         */
        get: operations["get_tasks_handler_api_room_tasks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join Room Handler
         * @description Join room
         */
        post: operations["join_room_handler_api_room_join_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room/donate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Donate To Stream Handler
         * @description Donate room
         */
        post: operations["donate_to_stream_handler_api_room_donate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room/donations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Donations Handler
         * @description Get donations
         */
        get: operations["get_donations_handler_api_room_donations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room/add_token_to_stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Token To Stream Handler
         * @description Add token to stream
         */
        post: operations["add_token_to_stream_handler_api_room_add_token_to_stream_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/{stream_slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Chat Messages */
        get: operations["get_chat_messages_api_chat__stream_slug__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/leaderboard/top100": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Leaderboard Top100
         * @description Get leaderboard
         */
        get: operations["get_leaderboard_top100_api_leaderboard_top100_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rpc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rpc Endpoint
         * @description RPC endpoint
         */
        post: operations["rpc_endpoint_api_rpc_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health */
        get: operations["health__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AccountMeta */
        AccountMeta: {
            /** Pubkey */
            pubkey: string;
            /** Issigner */
            isSigner: boolean;
            /** Iswritable */
            isWritable: boolean;
        };
        /** ActivePositionsResponse */
        ActivePositionsResponse: {
            /** Positions */
            positions: components["schemas"]["ActivePositionsSingleResponse"][];
            /** Wallet Id */
            wallet_id?: number | null;
        };
        /** ActivePositionsSingleResponse */
        ActivePositionsSingleResponse: {
            /** Token Id */
            token_id: number;
            /** Amount */
            amount: number;
            /** Amount Sol */
            amount_sol: number;
            /** Liquidity */
            liquidity: number;
            /** Pnl */
            pnl: number;
            /** Pnl Sol */
            pnl_sol: number;
            /** Name */
            name: string;
            /** Photo Hash */
            photo_hash: string;
            /** Address */
            address?: string | null;
        };
        /** AuthRequest */
        AuthRequest: {
            /** Public Key */
            public_key: string;
            /** Signature */
            signature: string;
            /** Signed Message */
            signed_message: string;
            /** Ref Id */
            ref_id?: number | null;
        };
        /** Body_add_spl_token_handler_api_token_create_post */
        Body_add_spl_token_handler_api_token_create_post: {
            /** Name */
            name: string;
            /** Symbol */
            symbol: string;
            /** Description */
            description: string;
            /**
             * Is Nsfw
             * @default false
             */
            is_nsfw: boolean;
            /** Twitter */
            twitter?: string | null;
            /** Telegram */
            telegram?: string | null;
            /** Youtube */
            youtube?: string | null;
            /** Website */
            website?: string | null;
            /** Buy */
            buy?: number | null;
            /**
             * Photo
             * Format: binary
             */
            photo: string;
        };
        /** Body_create_api_posts_create_post */
        Body_create_api_posts_create_post: {
            /** Files */
            files?: string[] | null;
        };
        /** Body_edit_post_api_posts_edit_patch */
        Body_edit_post_api_posts_edit_patch: {
            /** Delete Images */
            delete_images?: string[] | null;
            /** Additional Images */
            additional_images?: string[] | null;
        };
        /** Body_reply_api_posts_reply_post */
        Body_reply_api_posts_reply_post: {
            /** Files */
            files?: string[] | null;
        };
        /** Body_repost_api_posts_repost_post */
        Body_repost_api_posts_repost_post: {
            /** Files */
            files?: string[] | null;
        };
        /** Body_update_profile_api_user_update_profile_post */
        Body_update_profile_api_user_update_profile_post: {
            /** Photo */
            photo?: string | null;
        };
        /** ChartBar */
        ChartBar: {
            /** Timestamp */
            timestamp: number;
            /** Rate */
            rate: number;
            /** Type */
            type: string;
        };
        /** CreateRoomRequest */
        CreateRoomRequest: {
            /** Name */
            name: string;
            /** Tasks */
            tasks: components["schemas"]["StreamTask"][];
            /** Show Stream On */
            show_stream_on: string[];
            /** Is Nsfw */
            is_nsfw: boolean;
        };
        /** CreateRoomResponse */
        CreateRoomResponse: {
            /** Slug */
            slug: string;
        };
        /** CreateWalletRequest */
        CreateWalletRequest: {
            /** Name */
            name: string;
        };
        /** CustodialWalletResponse */
        CustodialWalletResponse: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Public Key */
            public_key: string;
            /** Holdings */
            holdings: number;
            /** Is Active */
            is_active: boolean;
            /** Is Archived */
            is_archived: boolean;
        };
        /** CustodialWalletTxResponse */
        CustodialWalletTxResponse: {
            /** Signature */
            signature: string;
            /** Wallet Address */
            wallet_address: string;
            /** Amount */
            amount: number;
            /** Timestamp */
            timestamp: number;
            /**
             * Type
             * @enum {string}
             */
            type: "DEPOSIT" | "WITHDRAW";
            /** Mint */
            mint: string;
        };
        /** DepositBatchRequest */
        DepositBatchRequest: {
            /** Items */
            items: components["schemas"]["DepositItem"][];
        };
        /** DepositItem */
        DepositItem: {
            /** Wallet Id */
            wallet_id: number;
            /**
             * Amount
             * @description Lamports
             */
            amount: number;
            /** Spl Token Address */
            spl_token_address: string;
        };
        /** DonateStreamRequest */
        DonateStreamRequest: {
            /** Slug */
            slug: string;
            /** Amount */
            amount: number;
            /** Text */
            text: string;
        };
        /** DonateStreamResponse */
        DonateStreamResponse: {
            /** Amount */
            amount: number;
            /** Text */
            text: string;
            user: components["schemas"]["UserResponseShort"];
            /** Timestamp */
            timestamp: number;
            /** Wallet Address */
            wallet_address: string;
            /** Signature */
            signature: string;
        };
        /** FavouriteSPLTokenResponse */
        FavouriteSPLTokenResponse: {
            /** Id */
            id: number;
            /** Address */
            address: string;
            /** Symbol */
            symbol: string;
            /** Rate */
            rate: number;
            /** Mcap */
            mcap: number;
            /** Mcap Diff 24H */
            mcap_diff_24h: number;
        };
        /** FolloweesListResponse */
        FolloweesListResponse: {
            /** Followees */
            followees: components["schemas"]["UserWithSubscriptionsResponse"][];
        };
        /** GetWsUrlResponse */
        GetWsUrlResponse: {
            /** Ws Url */
            ws_url: string;
            /** Client Ip */
            client_ip: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HolderResponse */
        HolderResponse: {
            /** Address */
            address: string;
            user: components["schemas"]["UserResponseShort"];
            /** Amount */
            amount: number;
            /** Percentage */
            percentage: number;
        };
        /** HolderStatusResponse */
        HolderStatusResponse: {
            user: components["schemas"]["UserResponseShort"];
            /** Pct */
            pct: number;
            /** Balance */
            balance: number;
            /**
             * Category
             * @enum {string}
             */
            category: "fish" | "whale";
        };
        /** Instruction */
        Instruction: {
            /** Programid */
            programId: string;
            /** Accounts */
            accounts: components["schemas"]["AccountMeta"][];
            /** Data */
            data: string;
        };
        /** JoinRoomRequest */
        JoinRoomRequest: {
            /** Slug */
            slug: string;
            /** Ws Url */
            ws_url: string;
        };
        /** JoinRoomResponse */
        JoinRoomResponse: {
            /** Url */
            url: string;
            /** Access Token */
            access_token: string;
            /** Slug */
            slug: string;
            /** Room Name */
            room_name: string;
            /** Is Creator */
            is_creator: boolean;
        };
        /** LeaderboardResponse */
        LeaderboardResponse: {
            /** Place */
            place: number;
            user: components["schemas"]["UserResponseShort"];
            /** Volume */
            volume: number;
            /** Pnl */
            pnl: number;
        };
        /** LimitOrderCreate */
        LimitOrderCreate: {
            /** Type */
            type?: string;
            /** Mcap Target */
            mcap_target: number;
            /** Amount */
            amount: number;
            /** Token Address */
            token_address: string;
            /** Expiry */
            expiry?: number | null;
            /** Slippage */
            slippage?: number | null;
        };
        /** LimitOrderOut */
        LimitOrderOut: {
            /** Id */
            id: number;
            /**
             * Order Type
             * @enum {string}
             */
            order_type: "BUY_DIP" | "STOP_LOSS" | "TAKE_PROFIT";
            /** Order Pubkey */
            order_pubkey: string;
            /** Input Mint */
            input_mint: string;
            /** Output Mint */
            output_mint: string;
            /** Making Amount */
            making_amount: number;
            /** Taking Amount */
            taking_amount: number;
            /** Start Mcap */
            start_mcap: number;
            /** Target Mcap */
            target_mcap: number;
            /**
             * Status
             * @enum {string}
             */
            status: "ACTIVE" | "CANCELLED" | "FAILED" | "SUCCESS";
            /** Created At */
            created_at: number;
            /** Expiry */
            expiry: number | null;
            /** Slippage */
            slippage: number;
            /** Triggered At */
            triggered_at: number | null;
        };
        /** ListChatMessageResponse */
        ListChatMessageResponse: {
            /** Id */
            id: string | number;
            user_info: components["schemas"]["UserResponseShort"];
            /** Text */
            text: string;
            /** Timestamp */
            timestamp: number;
            /**
             * Type
             * @enum {string}
             */
            type: "message" | "donation";
            /** Amount */
            amount: number | null;
        };
        /** LoginRequest */
        LoginRequest: {
            /** Wallet */
            wallet: string;
            /** Ref Id */
            ref_id: number;
        };
        /** LoginResponse */
        LoginResponse: {
            /** User Id */
            user_id: number;
            /** Nickname */
            nickname: string;
            /** Photo Hash */
            photo_hash: string | null;
        };
        /** MostProfitableResponse */
        MostProfitableResponse: {
            /** Stat */
            stat: components["schemas"]["TokenStatisticsSingleResponse"][];
            /** Wallet Id */
            wallet_id?: number | null;
        };
        /** NewCustodialWalletResponse */
        NewCustodialWalletResponse: {
            /** Id */
            id: number;
            /** Public Key */
            public_key: string;
            /** Private Key */
            private_key: string;
        };
        /** NonceResponse */
        NonceResponse: {
            /** Nonce */
            nonce: string;
        };
        /** PlotCustomValues */
        PlotCustomValues: {
            /** Sol Value */
            sol_value: number;
            /** Percentage */
            percentage: number;
        };
        /** PnlStatisticsDailyResponse */
        PnlStatisticsDailyResponse: {
            /** Pnl By Days */
            pnl_by_days: components["schemas"]["PnlStatisticsForDayResponse"][];
            whole_pnl: components["schemas"]["PnlStatisticsResponse"];
        };
        /** PnlStatisticsForDayResponse */
        PnlStatisticsForDayResponse: {
            /** Time */
            time: number;
            /** Value */
            value: number;
            /** @default {
             *       "sol_value": 0,
             *       "percentage": 0
             *     } */
            customValues: components["schemas"]["PlotCustomValues"];
        };
        /** PnlStatisticsResponse */
        PnlStatisticsResponse: {
            /**
             * Realised Pnl
             * @default 0
             */
            realised_pnl: number;
            /**
             * Realised Pnl Sol
             * @default 0
             */
            realised_pnl_sol: number;
            /**
             * Unrealised Pnl
             * @default 0
             */
            unrealised_pnl: number;
            /**
             * Unrealised Pnl Sol
             * @default 0
             */
            unrealised_pnl_sol: number;
            /**
             * Pnl
             * @default 0
             */
            pnl: number;
            /**
             * Pnl Sol
             * @default 0
             */
            pnl_sol: number;
            /**
             * Revenue
             * @default 0
             */
            revenue: number;
            /**
             * Revenue Sol
             * @default 0
             */
            revenue_sol: number;
            /**
             * Spent
             * @default 0
             */
            spent: number;
            /**
             * Spent Sol
             * @default 0
             */
            spent_sol: number;
            /**
             * Invested
             * @default 0
             */
            invested: number;
            /**
             * Invested Sol
             * @default 0
             */
            invested_sol: number;
            /**
             * Sold
             * @default 0
             */
            sold: number;
            /**
             * Sold Sol
             * @default 0
             */
            sold_sol: number;
            /**
             * Pnl Percentage
             * @default 0
             */
            pnl_percentage: number;
        };
        /** PostLikesResponse */
        PostLikesResponse: {
            /** Post Id */
            post_id: number;
            /** Count */
            count: number;
            /** Users */
            users: number[];
        };
        /** PostListResponse */
        PostListResponse: {
            /** Posts */
            posts: components["schemas"]["PostResponse"][];
        };
        /** PostResponse */
        PostResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            user: components["schemas"]["UserResponseShort"];
            /** Text */
            text: string;
            /** Attachments */
            attachments?: string[];
            /** Timestamp */
            timestamp: number;
            /** Likes */
            likes: number;
            /** Liked */
            liked: boolean;
            /** Replies */
            replies: number;
            /** Title */
            title: string;
            /** Repost Of */
            repost_of: number | null;
            /**
             * Views
             * @default 0
             */
            views: number;
            /**
             * Reposts
             * @default 0
             */
            reposts: number;
        };
        /** PostViewsPair */
        PostViewsPair: {
            /** Post Id */
            post_id: number;
            /** Count */
            count: number;
        };
        /** PostViewsResponse */
        PostViewsResponse: {
            /** Post Id */
            post_id: number;
            /** Count */
            count: number;
            /** Users */
            users: number[];
        };
        /** PreBuildTxBatchResponse */
        PreBuildTxBatchResponse: {
            /** Instructions Batches */
            instructions_batches: components["schemas"]["Instruction"][][];
        };
        /** RecentTxResponse */
        RecentTxResponse: {
            user_info: components["schemas"]["UserResponseShort"];
            /** Hash */
            hash: string | null;
            /** Token Amount */
            token_amount: number;
            /** Sol Amount */
            sol_amount: number;
            /**
             * Type
             * @enum {string}
             */
            type: "BUY" | "SELL" | "MIGRATION" | "DEPLOY" | "STREAM_CREATED" | "STREAM_FINISHED" | "DONATION_RECEIVED";
            /** Rate */
            rate: number | null;
            /** Timestamp */
            timestamp: number;
            /** Token Address */
            token_address: string | null;
            /** Token Name */
            token_name: string | null;
            /** Token Symbol */
            token_symbol: string | null;
            /** Token Photo Hash */
            token_photo_hash: string | null;
            /** Slug */
            slug: string | null;
            /** Donation Text */
            donation_text: string | null;
        };
        /** ReferralResponse */
        ReferralResponse: {
            /** Total Referrals */
            total_referrals: number;
            /** Referrals Volume */
            referrals_volume: number;
            /** Unclaimed Rewards */
            unclaimed_rewards: number;
            /** Claimed Rewards */
            claimed_rewards: number;
        };
        /** ReferralRewardResponse */
        ReferralRewardResponse: {
            /** Timestamp */
            timestamp: number;
            /** Amount */
            amount: number;
            /** Tx Id */
            tx_id: string;
        };
        /** ReplyTreeNodeResponse */
        ReplyTreeNodeResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            user: components["schemas"]["UserResponseShort"];
            /** Text */
            text: string;
            /** Attachments */
            attachments?: string[];
            /** Timestamp */
            timestamp: number;
            /** Likes */
            likes: number;
            /** Liked */
            liked: boolean;
            /** Replies */
            replies: number;
            /** Title */
            title: string;
            /** Repost Of */
            repost_of: number | null;
            /**
             * Views
             * @default 0
             */
            views: number;
            /**
             * Reposts
             * @default 0
             */
            reposts: number;
            /** Children */
            children?: components["schemas"]["ReplyTreeNodeResponse"][];
        };
        /** ReplyTreeNodeThreadsResponse */
        ReplyTreeNodeThreadsResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            user: components["schemas"]["UserResponseShort"];
            /** Text */
            text: string;
            /** Timestamp */
            timestamp: number;
            /** Likes */
            likes: number;
            /** Liked */
            liked: boolean;
            /** Token Id */
            token_id: number;
            /** Replies */
            replies: number;
            /** Image */
            image?: string | null;
            /** Repost Of */
            repost_of?: number | null;
            /** Children */
            children?: components["schemas"]["ReplyTreeNodeThreadsResponse"][];
        };
        /** RoomListResponse */
        RoomListResponse: {
            /** Slug */
            slug: string;
            /** Name */
            name: string;
            creator: components["schemas"]["UserResponseShort"];
            /** Created At */
            created_at: number;
            /** Viewers */
            viewers: number;
            /** Is Nsfw */
            is_nsfw: boolean;
            /** Stream Tokens */
            stream_tokens: components["schemas"]["SPLTokenResponse"][];
            /** Donation Sum */
            donation_sum: number;
            /** Tasks */
            tasks: components["schemas"]["StreamTask"][];
        };
        /** RoomResponseWSum */
        RoomResponseWSum: {
            /** Slug */
            slug: string;
            /** Name */
            name: string;
            creator: components["schemas"]["UserStreamResponse"];
            /** Created At */
            created_at: number;
            /** Viewers */
            viewers: number;
            /** Is Nsfw */
            is_nsfw: boolean;
            /** Stream Tokens */
            stream_tokens: components["schemas"]["SPLTokenResponse"][];
            /** Donation Sum */
            donation_sum: number;
            /** Finished */
            finished: boolean;
        };
        /** SPLTokenFullResponse */
        SPLTokenFullResponse: {
            /** Id */
            id: number;
            created_by: components["schemas"]["SPLTokenUserResponse"];
            /** Deployer Wallet */
            deployer_wallet: string | null;
            /** Name */
            name: string;
            /** Symbol */
            symbol: string;
            /** Description */
            description: string;
            /** Photo Hash */
            photo_hash: string;
            /** Twitter */
            twitter?: string | null;
            /** Telegram */
            telegram?: string | null;
            /** Youtube */
            youtube?: string | null;
            /** Website */
            website?: string | null;
            /** Address */
            address: string;
            /** Trade Started */
            trade_started: boolean;
            /** Trade Finished */
            trade_finished: boolean;
            /** Migrated */
            migrated: boolean;
            /** Last Tx Timestamp */
            last_tx_timestamp: number;
            /** Holders */
            holders: number;
            /** Messages */
            messages: number;
            /** Alltime Buy Txes */
            alltime_buy_txes: number;
            /** Alltime Sell Txes */
            alltime_sell_txes: number;
            /** Volume 24H */
            volume_24h: number;
            /** Mcap */
            mcap: number;
            /** Rate */
            rate: number;
            /** Creation Date */
            creation_date: number;
            /** Is Nsfw */
            is_nsfw: boolean;
            /** Mcap Diff 24H */
            mcap_diff_24h: number;
            /** Is Streaming */
            is_streaming: boolean;
            /** Bounding Curve */
            bounding_curve: number;
            /** Virtual Tokens */
            virtual_tokens: number;
            /** Virtual Sol */
            virtual_sol: number;
            /** Real Tokens */
            real_tokens: number;
            /** Real Sol */
            real_sol: number;
            /** Ath */
            ath: number;
            /** Prev Ath */
            prev_ath: number;
            /** Is Favourite */
            is_favourite: boolean | null;
            /** Is Creator */
            is_creator: boolean;
            /** Mcap Diff 5M */
            mcap_diff_5m: number;
            /** Mcap Diff 1H */
            mcap_diff_1h: number;
            /** Mcap Diff 6H */
            mcap_diff_6h: number;
            /** Alltime Volume */
            alltime_volume: number;
            /** Alltime Buy Volume */
            alltime_buy_volume: number;
            /** Alltime Sell Volume */
            alltime_sell_volume: number;
            /** Alltime Makers */
            alltime_makers: number;
            /** Slug */
            slug: string | null;
            /** Alltime Buyers */
            alltime_buyers: number;
            /** Alltime Sellers */
            alltime_sellers: number;
            /** Pool */
            pool: string | null;
        };
        /** SPLTokenLinkResponse */
        SPLTokenLinkResponse: {
            /** Id */
            id: number;
            /** Json Link */
            json_link: string;
            /** Address */
            address: string;
        };
        /** SPLTokenResponse */
        SPLTokenResponse: {
            /** Id */
            id: number;
            created_by: components["schemas"]["UserResponseShort"];
            /** Deployer Wallet */
            deployer_wallet: string | null;
            /** Name */
            name: string;
            /** Symbol */
            symbol: string;
            /** Description */
            description: string;
            /** Photo Hash */
            photo_hash: string;
            /** Twitter */
            twitter?: string | null;
            /** Telegram */
            telegram?: string | null;
            /** Youtube */
            youtube?: string | null;
            /** Website */
            website?: string | null;
            /** Address */
            address: string;
            /** Trade Started */
            trade_started: boolean;
            /** Trade Finished */
            trade_finished: boolean;
            /** Migrated */
            migrated: boolean;
            /** Last Tx Timestamp */
            last_tx_timestamp: number;
            /** Holders */
            holders: number;
            /** Messages */
            messages: number;
            /** Alltime Buy Txes */
            alltime_buy_txes: number;
            /** Alltime Sell Txes */
            alltime_sell_txes: number;
            /** Volume 24H */
            volume_24h: number;
            /** Mcap */
            mcap: number;
            /** Rate */
            rate: number;
            /** Creation Date */
            creation_date: number;
            /** Is Nsfw */
            is_nsfw: boolean;
            /** Mcap Diff 24H */
            mcap_diff_24h: number;
            /** Is Streaming */
            is_streaming: boolean;
            /** Bounding Curve */
            bounding_curve: number;
            /** Virtual Tokens */
            virtual_tokens: number;
            /** Virtual Sol */
            virtual_sol: number;
            /** Real Tokens */
            real_tokens: number;
            /** Real Sol */
            real_sol: number;
            /** Ath */
            ath: number;
            /** Prev Ath */
            prev_ath: number;
        };
        /** SPLTokenStatsResponse */
        SPLTokenStatsResponse: {
            last_5m: components["schemas"]["TimeWindowStats"];
            last_1h: components["schemas"]["TimeWindowStats"];
            last_6h: components["schemas"]["TimeWindowStats"];
            last_24h: components["schemas"]["TimeWindowStats"];
        };
        /** SPLTokenUserResponse */
        SPLTokenUserResponse: {
            /** User Id */
            user_id: number | null;
            /** User Nickname */
            user_nickname: string;
            /** User Photo Hash */
            user_photo_hash: string | null;
            /** Subscribed */
            subscribed: boolean | null;
            /** Subscribers */
            subscribers: number;
        };
        /** SPLTokenWithStreamResponse */
        SPLTokenWithStreamResponse: {
            /** Id */
            id: number;
            created_by: components["schemas"]["UserResponseShort"];
            /** Deployer Wallet */
            deployer_wallet: string | null;
            /** Name */
            name: string;
            /** Symbol */
            symbol: string;
            /** Description */
            description: string;
            /** Photo Hash */
            photo_hash: string;
            /** Twitter */
            twitter?: string | null;
            /** Telegram */
            telegram?: string | null;
            /** Youtube */
            youtube?: string | null;
            /** Website */
            website?: string | null;
            /** Address */
            address: string;
            /** Trade Started */
            trade_started: boolean;
            /** Trade Finished */
            trade_finished: boolean;
            /** Migrated */
            migrated: boolean;
            /** Last Tx Timestamp */
            last_tx_timestamp: number;
            /** Holders */
            holders: number;
            /** Messages */
            messages: number;
            /** Alltime Buy Txes */
            alltime_buy_txes: number;
            /** Alltime Sell Txes */
            alltime_sell_txes: number;
            /** Volume 24H */
            volume_24h: number;
            /** Mcap */
            mcap: number;
            /** Rate */
            rate: number;
            /** Creation Date */
            creation_date: number;
            /** Is Nsfw */
            is_nsfw: boolean;
            /** Mcap Diff 24H */
            mcap_diff_24h: number;
            /** Is Streaming */
            is_streaming: boolean;
            /** Bounding Curve */
            bounding_curve: number;
            /** Virtual Tokens */
            virtual_tokens: number;
            /** Virtual Sol */
            virtual_sol: number;
            /** Real Tokens */
            real_tokens: number;
            /** Real Sol */
            real_sol: number;
            /** Ath */
            ath: number;
            /** Prev Ath */
            prev_ath: number;
            /** Stream Slug */
            stream_slug: string;
            /** Stream Name */
            stream_name: string;
            /** Stream Created At */
            stream_created_at: number;
        };
        /** SignatureResponse */
        SignatureResponse: {
            /** Signature */
            signature: string;
        };
        /** SingleTransactionHistoryResponse */
        SingleTransactionHistoryResponse: {
            /** Price */
            price: number;
            /** Price Sol */
            price_sol: number;
            /** Amount */
            amount: number;
            /** Total */
            total: number;
            /** Total Sol */
            total_sol: number;
            /** Maker */
            maker: string;
            /** Token Photo Hash */
            token_photo_hash: string;
            /** Token Name */
            token_name: string;
            /** Timestamp */
            timestamp: number;
            /** Type */
            type: string;
            /**
             * Rate
             * @default -1
             */
            rate: number;
            /**
             * Sol Rate
             * @default -1
             */
            sol_rate: number;
            /** Address */
            address?: string | null;
        };
        /** StreamTask */
        StreamTask: {
            /** Description */
            description: string;
            /** Donation Target */
            donation_target?: number | null;
            /** Mcap Target */
            mcap_target?: number | null;
            /** Token Address */
            token_address?: string | null;
        };
        /** SubscribersListResponse */
        SubscribersListResponse: {
            /** Subscribers */
            subscribers: components["schemas"]["UserWithSubscriptionsResponse"][];
        };
        /** SubscriptionResponse */
        SubscriptionResponse: {
            /** User Id */
            user_id: number;
            /** User Nickname */
            user_nickname: string;
            /** User Photo Hash */
            user_photo_hash: string | null;
            /** User Subscribers */
            user_subscribers: number;
        };
        /** SwapSPLExactToSmthRequest */
        SwapSPLExactToSmthRequest: {
            /** Mint */
            mint: string;
            /** Exact Amount In */
            exact_amount_in: number;
            /** Min Amount Out */
            min_amount_out: number;
            /**
             * Speed
             * @enum {string}
             */
            speed: "default" | "auto";
            /** Priority Fee */
            priority_fee: number | null;
            /** Bribery Amount */
            bribery_amount: number | null;
        };
        /** SwapSPLSmthToExactRequest */
        SwapSPLSmthToExactRequest: {
            /** Mint */
            mint: string;
            /** Max Amount In */
            max_amount_in: number;
            /** Exact Amount Out */
            exact_amount_out: number;
            /**
             * Speed
             * @enum {string}
             */
            speed: "default" | "auto";
            /** Priority Fee */
            priority_fee: number | null;
            /** Bribery Amount */
            bribery_amount: number | null;
        };
        /** ThreadPostLikesResponse */
        ThreadPostLikesResponse: {
            /** Post Id */
            post_id: number;
            /** Token Id */
            token_id: number;
            /** Count */
            count: number;
            /** Users */
            users: number[];
        };
        /** ThreadPostResponse */
        ThreadPostResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            user: components["schemas"]["UserResponseShort"];
            /** Text */
            text: string;
            /** Timestamp */
            timestamp: number;
            /** Likes */
            likes: number;
            /** Liked */
            liked: boolean;
            /** Token Id */
            token_id: number;
            /** Replies */
            replies: number;
            /** Image */
            image?: string | null;
            /** Repost Of */
            repost_of?: number | null;
        };
        /** TimeWindowStats */
        TimeWindowStats: {
            /** Txns */
            txns: number;
            /** Makers */
            makers: number;
            /** Volume */
            volume: number;
            /** Buys */
            buys: number;
            /** Sells */
            sells: number;
            /** Buy Volume */
            buy_volume: number;
            /** Sell Volume */
            sell_volume: number;
            /** Buyers */
            buyers: number;
            /** Sellers */
            sellers: number;
        };
        /** TokenStatisticsSingleResponse */
        TokenStatisticsSingleResponse: {
            /** Token Id */
            token_id: number;
            /**
             * Address
             * @default
             */
            address: string | null;
            /** Pnl */
            pnl: number;
            /** Pnl Sol */
            pnl_sol: number;
            /** Pnl Percentage */
            pnl_percentage: number;
            /** Photo Hash */
            photo_hash: string;
            /** Name */
            name: string;
        };
        /** TradeHistoryResponse */
        TradeHistoryResponse: {
            /** Transactions */
            transactions: components["schemas"]["SingleTransactionHistoryResponse"][];
            /** Wallet Id */
            wallet_id?: number | null;
        };
        /** TxResponse */
        TxResponse: {
            user_info: components["schemas"]["UserResponseShort"];
            /** Id */
            id: number;
            /** Hash */
            hash: string;
            /** Token Amount */
            token_amount: number;
            /** Sol Amount */
            sol_amount: number;
            /** Type */
            type: string;
            /** Rate */
            rate: number;
            /** Timestamp */
            timestamp: number;
            /** Pnl */
            pnl?: number | null;
            /** Maker */
            maker: string | null;
        };
        /** UserInfoStreamObject */
        UserInfoStreamObject: {
            /** Slug */
            slug?: string | null;
            /** Type */
            type?: ("token_stream" | "no_token_stream") | null;
        };
        /** UserProfileResponse */
        UserProfileResponse: {
            /** User Id */
            user_id: number;
            /** User Nickname */
            user_nickname: string;
            /** User Photo Hash */
            user_photo_hash: string | null;
            /** Bio */
            bio: string;
            /** Volume */
            volume: number;
            /** Likes Received */
            likes_received: number;
            /** Mentions Received */
            mentions_received: number;
            /** Tokens Created */
            tokens_created: number;
            /** Followers */
            followers: number;
            /** Followees */
            followees: number;
            /**
             * Subscribed
             * @default false
             */
            subscribed: boolean;
        };
        /** UserResponse */
        UserResponse: {
            /** User Id */
            user_id: number;
            /** Nickname */
            nickname: string;
            /** Photo Hash */
            photo_hash: string | null;
            /** Wallet Address */
            wallet_address: string;
            /** Is Moderator */
            is_moderator: boolean;
            /** Ref Balance */
            ref_balance: number;
            /** Ref Claimed */
            ref_claimed: number;
            /** User Invited */
            user_invited: number;
            /** Spl Tokens */
            spl_tokens: number;
            /** Transactions Amount */
            transactions_amount: number;
            stream?: components["schemas"]["UserInfoStreamObject"] | null;
        };
        /** UserResponseShort */
        UserResponseShort: {
            /** User Id */
            user_id: number | null;
            /** User Nickname */
            user_nickname: string;
            /** User Photo Hash */
            user_photo_hash: string | null;
        };
        /** UserSPLTokenResponse */
        UserSPLTokenResponse: {
            /** Id */
            id: number;
            /** Address */
            address: string;
            /** Trade Started */
            trade_started: boolean;
            /**
             * Status
             * @enum {string}
             */
            status: "ACTIVE" | "FINISHED" | "DEPLOYING" | "FAILED";
            /** Name */
            name: string;
            /** Symbol */
            symbol: string;
            /** Description */
            description: string;
            /** Photo Hash */
            photo_hash: string;
            /** Holders */
            holders: number;
            /** Mcap */
            mcap: number;
            /** Mcap Diff */
            mcap_diff: number;
            /** Created At */
            created_at: number;
            /** Hidden */
            hidden: boolean;
            /** Rate */
            rate: number;
            /** Bounding Curve */
            bounding_curve: number;
        };
        /** UserStreamResponse */
        UserStreamResponse: {
            /** User Id */
            user_id: number | null;
            /** User Nickname */
            user_nickname: string;
            /** User Photo Hash */
            user_photo_hash: string | null;
            /** Subscribers */
            subscribers: number;
            /** Subscribed */
            subscribed: boolean | null;
        };
        /** UserTransactionResponse */
        UserTransactionResponse: {
            /** Transaction Id */
            transaction_id: number;
            /** Hash */
            hash: string;
            /** Token Name */
            token_name: string;
            /** Token Symbol */
            token_symbol: string;
            /** Token Photo Hash */
            token_photo_hash: string;
            /**
             * Type
             * @enum {string}
             */
            type: "BUY" | "SELL" | "DEPLOY";
            /** Sol Amount */
            sol_amount: number;
            /** Token Amount */
            token_amount: number;
            /** Timestamp */
            timestamp: number;
        };
        /** UserWithSubscriptionsResponse */
        UserWithSubscriptionsResponse: {
            /** User Id */
            user_id: number;
            /** User Nickname */
            user_nickname: string;
            /** User Photo Hash */
            user_photo_hash: string | null;
            /** User Followers */
            user_followers: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VolumeDailyResponse */
        VolumeDailyResponse: {
            /** Volume */
            volume: number;
            /** Timestamp */
            timestamp: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login_user_api_user_testlogin_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_nonce_api_user_nonce_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NonceResponse"];
                };
            };
        };
    };
    authenticate_api_user_auth_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_endpoint_api_user_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    logout_api_user_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_info_api_user_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    get_user_transactions_api_user_transactions_get: {
        parameters: {
            query: {
                user_id: number;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserTransactionResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_spl_tokens_api_user_spl_tokens_get: {
        parameters: {
            query: {
                user_id: number;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSPLTokenResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    claim_ref_balance_api_user_claim_ref_balance_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    get_profile_api_user_profile_get: {
        parameters: {
            query: {
                user_id: number;
                from_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_profile_api_user_update_profile_post: {
        parameters: {
            query?: {
                bio?: string | null;
                nickname?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_update_profile_api_user_update_profile_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_activity_api_user_user_activity_get: {
        parameters: {
            query: {
                user_id: number;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VolumeDailyResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_referrals_api_user_referrals_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReferralResponse"];
                };
            };
        };
    };
    get_user_referral_history_api_user_ref_reward_history_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReferralRewardResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_spl_token_handler_api_token_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_add_spl_token_handler_api_token_create_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPLTokenLinkResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_spl_token_handler_api_token_get: {
        parameters: {
            query: {
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPLTokenFullResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_spl_token_stats_handler_api_token_stats_get: {
        parameters: {
            query: {
                spl_token_id_address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPLTokenStatsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_holders_handler_api_token_holders_get: {
        parameters: {
            query: {
                spl_token_id_address: string;
                limit?: number | null;
                page?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HolderResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_holders_status_handler_api_token_holders_status_get: {
        parameters: {
            query: {
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HolderStatusResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_spl_token_on_the_rocket_handler_api_token_on_the_rocket_get: {
        parameters: {
            query?: {
                show_nsfw?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPLTokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_spl_tokens_handler_api_token_list_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                show_nsfw?: boolean;
                sorting_filter?: "new" | "last_order" | "gain" | "mcap" | "raydium" | "user" | "live_stream";
                sorting_order?: "desc" | "asc";
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPLTokenResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_spl_tokens_with_streams_handler_api_token_with_streams_get: {
        parameters: {
            query: {
                limit: number;
                offset?: number;
                is_nsfw?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPLTokenWithStreamResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    swap_exact_a_to_b_handler_api_token_swap_exact_a_to_b_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SwapSPLExactToSmthRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    swap_a_to_exact_b_handler_api_token_swap_a_to_exact_b_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SwapSPLSmthToExactRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    swap_b_to_exact_a_handler_api_token_swap_b_to_exact_a_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SwapSPLSmthToExactRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    swap_exact_b_to_a_handler_api_token_swap_exact_b_to_a_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SwapSPLExactToSmthRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    proxy_to_goplus_api_token_audit__token_address__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token_address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_insiders_api_token_insiders__token_address__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token_address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_snipers_api_token_snipers__token_address__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token_address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_favourite_tokens_api_token_favourite_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FavouriteSPLTokenResponse"][];
                };
            };
        };
    };
    add_favourite_token_api_token_favourite__token_address__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token_address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FavouriteSPLTokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_favourite_token_api_token_favourite__token_address__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token_address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_limit_order_api_limit_orders_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LimitOrderCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitOrderOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_limit_order_api_limit_orders__order_pubkey__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                order_pubkey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignatureResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_orders_api_limit_orders_active_get: {
        parameters: {
            query: {
                wallet_id: number;
                status?: ("ACTIVE" | "SUCCESS" | "FAILED" | "CANCELLED")[] | null;
                order_type?: ("BUY_DIP" | "STOP_LOSS" | "TAKE_PROFIT")[] | null;
                token_mint?: string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitOrderOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_wallets_api_wallets_get: {
        parameters: {
            query?: {
                archived?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustodialWalletResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_new_wallet_api_wallets_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWalletRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewCustodialWalletResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    archive_user_wallet_api_wallets_archive_post: {
        parameters: {
            query: {
                wallet_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unarchive_user_wallet_api_wallets_unarchive_post: {
        parameters: {
            query: {
                wallet_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_active_user_wallet_api_wallets_set_active_post: {
        parameters: {
            query: {
                wallet_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rename_user_wallet_api_wallets_rename_post: {
        parameters: {
            query: {
                wallet_id: number;
                new_name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    withdraw_user_wallet_api_wallets_withdraw_post: {
        parameters: {
            query: {
                wallet_id: number;
                spl_token_address: string;
                amount: number;
                destination: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deposit_user_wallet_batch_api_wallets_deposit_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DepositBatchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PreBuildTxBatchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_wallet_tx_history_api_wallets_tx_history_get: {
        parameters: {
            query?: {
                sorting_filter?: "withdraw" | "deposit" | "all";
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustodialWalletTxResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_deposit_transaction_api_wallets_add_deposit_transaction_post: {
        parameters: {
            query: {
                signature: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    subscribe_api_subscriptions_subscribe_post: {
        parameters: {
            query: {
                followee_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unsubscribe_api_subscriptions_unsubscribe_delete: {
        parameters: {
            query: {
                followee_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    subscribers_list_api_subscriptions_subscribers_list_get: {
        parameters: {
            query: {
                user_id: number;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscribersListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    followees_list_api_subscriptions_followees_list_get: {
        parameters: {
            query: {
                user_id: number;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolloweesListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_api_posts_create_post: {
        parameters: {
            query?: {
                title?: string | null;
                text?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_create_api_posts_create_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_api_posts_delete_delete: {
        parameters: {
            query: {
                post_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    edit_post_api_posts_edit_patch: {
        parameters: {
            query: {
                post_id: number;
                text?: string | null;
                title?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_edit_post_api_posts_edit_patch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reply_api_posts_reply_post: {
        parameters: {
            query: {
                parent_id: number;
                text: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_reply_api_posts_reply_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    replies_tree_api_posts_replies_tree_get: {
        parameters: {
            query: {
                post_id: number;
                from_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReplyTreeNodeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    posts_by_user_api_posts_get_posts_by_user_get: {
        parameters: {
            query: {
                user_id: number;
                from_id?: number | null;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_by_id_api_posts_get_post_by_id_get: {
        parameters: {
            query: {
                post_id: number;
                from_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    posts_by_user_subscriptions_api_posts_posts_by_user_subscriptions_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    global_posts_api_posts_global_get: {
        parameters: {
            query?: {
                from_id?: number | null;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    like_api_posts_like_post: {
        parameters: {
            query: {
                post_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostLikesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unlike_api_posts_unlike_delete: {
        parameters: {
            query: {
                post_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostLikesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_views_api_posts_update_views_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number[];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostViewsPair"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_views_api_posts_post_views_get: {
        parameters: {
            query: {
                post_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostViewsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    repost_api_posts_repost_post: {
        parameters: {
            query: {
                post_id: number;
                title: string;
                text: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["Body_repost_api_posts_repost_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_trade_history_api_portfolio_trade_history_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                address?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TradeHistoryResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_pnl_statistics_by_period_api_portfolio_pnl_statistics_by_period_get: {
        parameters: {
            query: {
                user_id: number;
                delta?: number;
                address?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PnlStatisticsDailyResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_pnl_statistics_all_api_portfolio_pnl_statistics_all_get: {
        parameters: {
            query: {
                user_id: number;
                address?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PnlStatisticsDailyResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_wallets_debug_api_portfolio_txs_debug_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_most_profitable_api_portfolio_most_profitable_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                address?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MostProfitableResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_active_positions_api_portfolio_active_positions_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                address?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivePositionsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_api_threads_create_post: {
        parameters: {
            query: {
                text: string;
                token_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadPostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_by_id_api_threads_get_post_by_id_get: {
        parameters: {
            query: {
                post_id: number;
                from_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadPostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_likes_api_threads_post_likes_get: {
        parameters: {
            query: {
                post_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadPostLikesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    like_api_threads_like_post: {
        parameters: {
            query: {
                post_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadPostLikesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unlike_api_threads_unlike_delete: {
        parameters: {
            query: {
                post_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadPostLikesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    token_thread_api_threads_token_thread_get: {
        parameters: {
            query: {
                token_id: number;
                from_id?: number | null;
                sorting_filter?: "asc" | "desc";
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadPostResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reply_api_threads_reply_post: {
        parameters: {
            query: {
                parent_id: number;
                text: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadPostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    replies_tree_api_threads_replies_tree_get: {
        parameters: {
            query: {
                post_id: number;
                from_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReplyTreeNodeThreadsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    repost_api_threads_repost_post: {
        parameters: {
            query: {
                post_id: number;
                text: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_spl_token_tx_api_tx_get: {
        parameters: {
            query: {
                token_id_address: string;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TxResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_price_chart_api_tx_price_chart_get: {
        parameters: {
            query: {
                token_address: string;
                currency: "USD" | "SOL";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChartBar"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_recent_tx_handler_api_tx_recent_get: {
        parameters: {
            query?: {
                limit?: number;
                show_events?: ("BUY" | "SELL" | "MIGRATION" | "DEPLOY" | "STREAM_CREATED" | "STREAM_FINISHED" | "DONATION_RECEIVED")[];
                show_nsfw?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecentTxResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_last_tx_by_token_handler_api_tx_last_by_token_get: {
        parameters: {
            query: {
                /** @description Token address */
                token_address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecentTxResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_room_handler_api_room_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoomRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateRoomResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_room_handler_api_room_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_room_info_handler_api_room_info__slug__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomResponseWSum"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_rooms_list_handler_api_room_list_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                show_nsfw?: boolean;
                sorting_filter?: "all_streams" | "token_stream" | "no_token_stream";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomListResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ws_url_handler_api_room_ws_url_get: {
        parameters: {
            query: {
                slug: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetWsUrlResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tasks_handler_api_room_tasks_get: {
        parameters: {
            query: {
                slug: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StreamTask"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    join_room_handler_api_room_join_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JoinRoomRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JoinRoomResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    donate_to_stream_handler_api_room_donate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DonateStreamRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DonateStreamResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_donations_handler_api_room_donations_get: {
        parameters: {
            query: {
                slug: string;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DonateStreamResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_token_to_stream_handler_api_room_add_token_to_stream_post: {
        parameters: {
            query: {
                token_address: string;
                slug: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_chat_messages_api_chat__stream_slug__get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path: {
                stream_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListChatMessageResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_leaderboard_top100_api_leaderboard_top100_get: {
        parameters: {
            query?: {
                sort_field?: "volume" | "pnl";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeaderboardResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rpc_endpoint_api_rpc_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never> | Record<string, never>[];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
